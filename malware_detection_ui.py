import streamlit as st
import pickle
import pandas as pd
import numpy as np
from datetime import datetime
import os

# Set page configuration
st.set_page_config(
    page_title="Android Malware Detection",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #ff7f0e;
        margin-bottom: 1rem;
    }
    .feature-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .prediction-result {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .malware {
        background-color: #ffebee;
        color: #c62828;
        border: 2px solid #ef5350;
    }
    .goodware {
        background-color: #e8f5e8;
        color: #2e7d32;
        border: 2px solid #66bb6a;
    }
    .confidence-bar {
        background-color: #e0e0e0;
        border-radius: 10px;
        padding: 0.5rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model_and_info():
    """Load the trained model and model information"""
    try:
        # Load the trained model
        with open('android_malware_rf_model.pkl', 'rb') as f:
            model = pickle.load(f)
        
        # Load model info
        with open('model_info.pkl', 'rb') as f:
            model_info = pickle.load(f)
            
        return model, model_info
    except FileNotFoundError:
        st.error("‚ùå Model files not found! Please ensure 'android_malware_rf_model.pkl' and 'model_info.pkl' are in the same directory.")
        return None, None
    except Exception as e:
        st.error(f"‚ùå Error loading model: {str(e)}")
        return None, None

def predict_malware(model, model_info, feature_values):
    """Make prediction using the loaded model"""
    try:
        # Create DataFrame with feature names
        input_data = pd.DataFrame([feature_values], columns=model_info['feature_names'])
        
        # Make prediction
        prediction = model.predict(input_data)[0]
        probability = model.predict_proba(input_data)[0]
        
        return prediction, probability
    except Exception as e:
        st.error(f"‚ùå Error making prediction: {str(e)}")
        return None, None

def main():
    # Header
    st.markdown('<h1 class="main-header">üõ°Ô∏è Android Malware Detection System</h1>', unsafe_allow_html=True)
    
    # Load model
    model, model_info = load_model_and_info()
    
    if model is None or model_info is None:
        st.stop()
    
    # Sidebar with model information
    with st.sidebar:
        st.markdown("## üìä Model Information")
        st.write(f"**Model Type:** Random Forest Classifier")
        st.write(f"**Features Used:** {len(model_info['feature_names'])}")
        st.write(f"**Accuracy:** {model_info['model_performance']['accuracy']:.2%}")
        st.write(f"**Precision:** {model_info['model_performance']['precision']:.2%}")
        st.write(f"**Recall:** {model_info['model_performance']['recall']:.2%}")
        st.write(f"**F1-Score:** {model_info['model_performance']['f1_score']:.2%}")
        
        st.markdown("---")
        st.markdown("## üì± About")
        st.write("This system analyzes Android app permissions to detect potential malware using machine learning.")
        
        st.markdown("---")
        st.markdown("## üîß How to Use")
        st.write("1. Set the permission values (0 = No, 1 = Yes)")
        st.write("2. Click 'Predict' to analyze")
        st.write("3. View the prediction result")
    
    # Main content area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown('<h2 class="sub-header">üìã Android App Permissions</h2>', unsafe_allow_html=True)
        
        # Feature input form
        with st.form("prediction_form"):
            st.markdown('<div class="feature-container">', unsafe_allow_html=True)
            
            # Create input fields for each feature
            feature_values = []
            feature_descriptions = {
                'RECEIVE_BOOT_COMPLETED': 'App starts automatically when device boots',
                'GET_TASKS': 'App can retrieve information about running tasks',
                'KILL_BACKGROUND_PROCESSES': 'App can terminate other background processes',
                'WAKE_LOCK': 'App can prevent device from going to sleep',
                'SYSTEM_ALERT_WINDOW': 'App can display over other apps',
                'READ_PHONE_STATE': 'App can read phone status and identity'
            }
            
            st.markdown("**Set each permission (0 = Not Granted, 1 = Granted):**")
            
            for i, feature in enumerate(model_info['feature_names']):
                col_a, col_b = st.columns([3, 1])
                
                with col_a:
                    st.write(f"**{feature}**")
                    st.caption(feature_descriptions.get(feature, "Android permission"))
                
                with col_b:
                    value = st.selectbox(
                        f"Value for {feature}",
                        options=[0, 1],
                        format_func=lambda x: "‚úÖ Yes" if x == 1 else "‚ùå No",
                        key=f"feature_{i}",
                        label_visibility="collapsed"
                    )
                    feature_values.append(value)
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Prediction button
            col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
            with col_btn2:
                predict_button = st.form_submit_button("üîç Predict Malware", use_container_width=True)
        
        # Quick preset buttons
        st.markdown("### üöÄ Quick Test Presets")
        col_preset1, col_preset2, col_preset3 = st.columns(3)
        
        with col_preset1:
            if st.button("üòá Safe App", use_container_width=True):
                st.session_state.preset = [0, 0, 0, 0, 0, 0]
                st.rerun()
        
        with col_preset2:
            if st.button("‚ö†Ô∏è Suspicious App", use_container_width=True):
                st.session_state.preset = [1, 1, 0, 1, 0, 1]
                st.rerun()
        
        with col_preset3:
            if st.button("ü¶† High Risk App", use_container_width=True):
                st.session_state.preset = [1, 1, 1, 1, 1, 1]
                st.rerun()
    
    with col2:
        st.markdown('<h2 class="sub-header">üéØ Prediction Result</h2>', unsafe_allow_html=True)
        
        # Prediction logic
        if predict_button or 'prediction_result' in st.session_state:
            if predict_button:
                prediction, probability = predict_malware(model, model_info, feature_values)
                
                if prediction is not None:
                    st.session_state.prediction_result = {
                        'prediction': prediction,
                        'probability': probability,
                        'feature_values': feature_values,
                        'timestamp': datetime.now()
                    }
            
            if 'prediction_result' in st.session_state:
                result = st.session_state.prediction_result
                prediction = result['prediction']
                probability = result['probability']
                
                # Display prediction result
                if prediction == 1:
                    st.markdown(
                        '<div class="prediction-result malware">ü¶† MALWARE DETECTED</div>',
                        unsafe_allow_html=True
                    )
                    confidence = probability[1] * 100
                    st.error(f"‚ö†Ô∏è Malware Confidence: {confidence:.1f}%")
                else:
                    st.markdown(
                        '<div class="prediction-result goodware">‚úÖ GOODWARE</div>',
                        unsafe_allow_html=True
                    )
                    confidence = probability[0] * 100
                    st.success(f"‚úÖ Goodware Confidence: {confidence:.1f}%")
                
                # Confidence breakdown
                st.markdown("### üìä Confidence Breakdown")
                
                # Goodware probability
                goodware_conf = probability[0] * 100
                st.write("**Goodware Probability:**")
                st.progress(probability[0])
                st.write(f"{goodware_conf:.1f}%")
                
                # Malware probability
                malware_conf = probability[1] * 100
                st.write("**Malware Probability:**")
                st.progress(probability[1])
                st.write(f"{malware_conf:.1f}%")
                
                # Feature importance for this prediction
                st.markdown("### üåü Feature Impact")
                feature_impacts = []
                for i, (feature, value) in enumerate(zip(model_info['feature_names'], result['feature_values'])):
                    # Simple feature importance visualization
                    if value == 1:
                        st.write(f"üî¥ **{feature}**: Enabled")
                    else:
                        st.write(f"üü¢ **{feature}**: Disabled")
        
        else:
            st.info("üëÜ Set the permissions above and click 'Predict' to analyze the app")
    
    # Additional information section
    st.markdown("---")
    with st.expander("üìö Understanding the Results"):
        st.markdown("""
        ### How the Model Works:
        - **Random Forest Algorithm**: Uses 100 decision trees to make predictions
        - **6 Key Permissions**: Analyzes the most important Android permissions
        - **93.22% Accuracy**: Tested on real Android malware dataset
        
        ### Permission Meanings:
        1. **RECEIVE_BOOT_COMPLETED**: Apps that start automatically when device boots
        2. **GET_TASKS**: Apps that can see what other apps are running
        3. **KILL_BACKGROUND_PROCESSES**: Apps that can stop other running apps
        4. **WAKE_LOCK**: Apps that can prevent device from sleeping
        5. **SYSTEM_ALERT_WINDOW**: Apps that can display over other apps
        6. **READ_PHONE_STATE**: Apps that can read phone information
        
        ### Risk Levels:
        - **Low Risk**: Few or no suspicious permissions
        - **Medium Risk**: Some concerning permission combinations
        - **High Risk**: Multiple high-risk permissions enabled
        """)
    
    # Footer
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666;'>"
        "üõ°Ô∏è Android Malware Detection System | "
        f"Powered by Machine Learning | "
        f"Model Accuracy: {model_info['model_performance']['accuracy']:.1%}"
        "</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
